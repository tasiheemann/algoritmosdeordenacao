Atividade Prática de Bubble Sort em C#
Este exercício demonstra o algoritmo Bubble Sort para ordenar uma lista de números inteiros em ordem crescente.

1. O Código da Função BubbleSort
O algoritmo usa dois loops aninhados (for). O loop externo controla o número de passagens, e o loop interno realiza as comparações e trocas.

C#

using System;
using System.Linq;

public class AlgoritmosDeOrdenacao
{
    // Função que implementa o algoritmo Bubble Sort para ordem crescente
    public static void BubbleSort(int[] array)
    {
        int n = array.Length;

        // Loop externo: Controla o número de 'passagens'
        // A cada passagem, o maior elemento "borbulha" para a posição correta no final.
        for (int i = 0; i < n - 1; i++)
        {
            // Loop interno: Percorre o array comparando elementos adjacentes.
            // O '- i - 1' é para ignorar os elementos que já estão ordenados no final.
            for (int j = 0; j < n - i - 1; j++)
            {
                // Condição de Comparação:
                // Se o elemento atual (array[j]) for MAIOR que o próximo (array[j+1]),
                // eles estão fora de ordem para uma ordenação crescente.
                if (array[j] > array[j + 1])
                {
                    // Realizar a TROCA (Swap) usando uma variável temporária
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;

                    // Opcional: Adicionar um Console.WriteLine para mostrar o array após cada troca,
                    // ajudando a visualizar o processo.
                    // Console.WriteLine($"Troca: {string.Join(", ", array)}");
                }
            }
            // Opcional: Adicionar um Console.WriteLine para marcar o fim da passagem.
            // Console.WriteLine($"--- Fim da Passagem {i + 1} ---");
        }
    }

    // Função auxiliar para exibir o array
    public static void ImprimirArray(int[] array)
    {
        Console.WriteLine(string.Join(", ", array));
    }

    public static void Main(string[] args)
    {
        // --- Teste 1: Um array pequeno e desordenado ---
        int[] lista1 = { 5, 1, 4, 2, 8 };
        Console.WriteLine("Lista Original 1: ");
        ImprimirArray(lista1);

        BubbleSort(lista1);

        Console.WriteLine("\nLista Ordenada 1 (Crescente): ");
        ImprimirArray(lista1); // Saída esperada: 1, 2, 4, 5, 8

        Console.WriteLine("------------------------------");

        // --- Teste 2: Um array maior com números repetidos ---
        int[] lista2 = { 77, 4, 1, 15, 4, 9, 23 };
        Console.WriteLine("Lista Original 2: ");
        ImprimirArray(lista2);

        BubbleSort(lista2);

        Console.WriteLine("\nLista Ordenada 2 (Crescente): ");
        ImprimirArray(lista2); // Saída esperada: 1, 4, 4, 9, 15, 23, 77
    }
}
2. Modifiquem a função e apliquem conceitos de otimização (isAnyChange):

Desafio 1: Ordenação Decrescente
Modifique a função BubbleSort para ordenar o array em ordem decrescente (do maior para o menor).

Dica: Apenas uma linha de código precisa ser alterada dentro do if. Mude a condição de comparação!

Desafio 2: Bubble Sort Otimizado
O Bubble Sort original continua fazendo passagens mesmo que o array já esteja totalmente ordenado. Para otimizar, use uma variável booleana (trocaRealizada) para verificar se houve alguma troca em uma passagem.

Crie uma variável booleana, por exemplo, trocaRealizada, e defina-a como false no início do loop interno.

Defina trocaRealizada = true sempre que ocorrer uma troca.

Se o loop interno terminar e trocaRealizada for false, isso significa que o array está ordenado, e você pode sair do loop externo (usando break).

Desafio 3: Contagem de Operações
Modifique a função para contar e exibir:

O número total de comparações realizadas.
O número total de trocas (swaps) realizadas.
----------------------------------------------------------RESPOSTA-------------------------------------------------------------------------------
using System;

public class AlgoritmosDeOrdenacao
{
    // Função Bubble Sort (pode ser crescente ou decrescente dependendo da condição do if)
    public static void BubbleSort(int[] array, bool crescente = true)
    {
        int n = array.Length;
        int comparacoes = 0;
        int trocas = 0;

        for (int i = 0; i < n - 1; i++)
        {
            bool trocaRealizada = false; // Flag para otimização

            for (int j = 0; j < n - i - 1; j++)
            {
                comparacoes++;

                // Crescente: array[j] > array[j+1]
                // Decrescente: array[j] < array[j+1]
                if ((crescente && array[j] > array[j + 1]) ||
                    (!crescente && array[j] < array[j + 1]))
                {
                    // Realiza troca
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;

                    trocas++;
                    trocaRealizada = true;
                }
            }

            // Se não houve troca, o array já está ordenado → encerra
            if (!trocaRealizada)
                break;
        }

        // Exibe estatísticas
        Console.WriteLine($"\nTotal de Comparações: {comparacoes}");
        Console.WriteLine($"Total de Trocas: {trocas}");
    }

    // Função auxiliar para exibir o array
    public static void ImprimirArray(int[] array)
    {
        Console.WriteLine(string.Join(", ", array));
    }

    public static void Main(string[] args)
    {
        // --- Teste 1: Ordem Crescente ---
        int[] lista1 = { 5, 1, 4, 2, 8 };
        Console.WriteLine("Lista Original 1: ");
        ImprimirArray(lista1);

        BubbleSort(lista1, true); // true = crescente

        Console.WriteLine("\nLista Ordenada 1 (Crescente): ");
        ImprimirArray(lista1);

        Console.WriteLine("------------------------------");

        // --- Teste 2: Ordem Decrescente ---
        int[] lista2 = { 77, 4, 1, 15, 4, 9, 23 };
        Console.WriteLine("Lista Original 2: ");
        ImprimirArray(lista2);

        BubbleSort(lista2, false); // false = decrescente

        Console.WriteLine("\nLista Ordenada 2 (Decrescente): ");
        ImprimirArray(lista2);
    }
}
---------------------------------------------------------------EXEMPLO ORDENAÇÃO DE STRING-----------------------------------
using System;

class Program
{
    static void Main()
    {
        // Vetor de strings
        string[] nomes = { "Maria", "João", "Ana", "Pedro", "Beatriz" };

        Console.WriteLine("Antes da ordenação:");
        MostrarArray(nomes);

        // Chama o Bubble Sort
        BubbleSort(nomes);

        Console.WriteLine("\nDepois da ordenação (ordem alfabética):");
        MostrarArray(nomes);
    }

    // Função Bubble Sort adaptada para strings
    static void BubbleSort(string[] array)
    {
        int n = array.Length;
        bool trocou;

        // Laço externo percorre o vetor várias vezes
        for (int i = 0; i < n - 1; i++)
        {
            trocou = false; // verifica se houve troca na passada atual

            // Laço interno faz as comparações adjacentes
            for (int j = 0; j < n - i - 1; j++)
            {
                // CompareTo retorna:
                // < 0 se array[j] < array[j + 1]
                // = 0 se forem iguais
                // > 0 se array[j] > array[j + 1]
                if (array[j].CompareTo(array[j + 1]) > 0)
                {
                    // Troca os elementos
                    string temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                    trocou = true;
                }
            }

            // Se nenhuma troca ocorreu, já está ordenado
            if (!trocou)
                break;
        }
    }

    // Função auxiliar para imprimir o vetor
    static void MostrarArray(string[] array)
    {
        foreach (string nome in array)
        {
            Console.Write(nome + " ");
        }
        Console.WriteLine();
    }
}
